@page "/inscribir-examenes"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using ExamenesApp_Modelos.DTOs
@using ExamenesApp.Servicios
@inject InscripcionExamenService servicioInscripcionExamen
@inject PerfilService perfilService
@inject IJSRuntime JS
@if (isLoading)
{
    <p>Cargando exámenes...</p>
}
else if (String.IsNullOrEmpty(@nombreUsuario))
{
    <div class="alert alert-warning">
        Debes completar tu perfil antes de inscribirte a un examen. <a href="/registro-datos" class="alert-link">Haz clic aquí para completar tu perfil.</a>
    </div>
    return;
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3 class="mb-0">Inscripción a Examen</h3>
        <a href="/inicio" class="btn btn-primary">
            Ver lista de exámenes
        </a>
    </div>

    <EditForm Model="@modelo" OnValidSubmit="RegistrarExamen">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-4">
            <label class="form-label">Seleccione el examen</label>
            <InputSelect @bind-Value="modelo.ExamenId" class="form-control">
                <option value="" disabled selected>--Seleccionar exámen--</option>
                <option value="1">Ingeniería en Sistemas</option>
                <option value="2">Biología</option>
                <option value="3">Derecho</option>
                <option value="4">Comercio</option>
                <option value="5">Educación</option>
                <option value="6">Psicología</option>
                <option value="7">Matemáticas</option>
                <option value="8">Química</option>
                <option value="9">Economía</option>
                <option value="10">Administración</option>
                <option value="11">Mercadotecnia</option>
            </InputSelect>

        </div>




        <button type="submit" class="btn btn-primary">Inscribirse</button>
    </EditForm>

}

@code {
    private InscripcionExamenDTO modelo = new();
    private string nombreUsuario = "";

    private bool isLoading = true;
    protected async override Task OnInitializedAsync()
    {
        var usuarioConRegistro = await perfilService.GetPerfilAsync();
        if (usuarioConRegistro is null)
        {
            nombreUsuario = null;
        }
        else
        {
            nombreUsuario = usuarioConRegistro.Nombres;
        }
        isLoading = false;
    }

    private async Task RegistrarExamen()
    {

        var inscripcionExamen = await servicioInscripcionExamen.RegistrarInscripcion(modelo.ExamenId);
      
        if (inscripcionExamen is null)
        {
            await JS.InvokeVoidAsync("toastrNotificaciones.error",
            $"Ya está inscrito en este exámen", "Error");


            modelo = new InscripcionExamenDTO();
            return;
        }
        await JS.InvokeVoidAsync("toastrNotificaciones.success",
        $"Exámen registrado con éxito. Fecha: {inscripcionExamen.FechaExamen:dd 'de' MMMM 'de' yyyy. Hora: HH:mm}.",
        "Éxito");
        modelo = new InscripcionExamenDTO();
    }
}


